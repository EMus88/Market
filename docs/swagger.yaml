basePath: /
definitions:
  models.Admin:
    properties:
      code:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - code
    - password
    - phone
    - username
    type: object
  models.Category:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  models.ProductDTO:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      photo:
        items:
          type: string
        type: array
      price:
        type: number
      valume:
        type: number
      visible:
        type: boolean
      weight:
        type: number
    required:
    - name
    - price
    - valume
    - weight
    type: object
  models.UpdateRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.User:
    properties:
      full_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - password
    - phone
    - username
    type: object
  models.Visible:
    properties:
      name:
        type: string
      visible:
        type: boolean
    required:
    - name
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Server for catalog of internet-shop
  title: Internet-shop API
  version: "1.0"
paths:
  /auth/admin:
    post:
      consumes:
      - application/json
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Admin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: '{"error":"Not allowed request"}'
          schema:
            type: string
        "500":
          description: '{"error":"Internal server error"}'
          schema:
            type: string
      summary: Add administrator
      tags:
      - auth
  /auth/signIn:
    post:
      consumes:
      - application/json
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: '{"access token":"...","refresh token":"..."}'
          schema:
            type: string
        "400":
          description: '{"error":"Not allowed request"}'
          schema:
            type: string
        "401":
          description: '{"error":"User not found"}'
          schema:
            type: string
        "500":
          description: '{"error":"Internal server error"}'
          schema:
            type: string
      summary: Authorizaton
      tags:
      - auth
  /auth/signUp:
    post:
      consumes:
      - application/json
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: '{"error":"Not allowed request"}'
          schema:
            type: string
        "409":
          description: '{"error":"credential error"}'
          schema:
            type: string
        "411":
          description: '{"error":"Password length will be from 7 to 50 simbols"}'
          schema:
            type: string
        "500":
          description: '{"error":"Internal server error"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Registration
      tags:
      - auth
  /auth/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: refresh token
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"access token":"...","refresh token":"..."}'
          schema:
            type: string
        "400":
          description: '{"error":"Not allowed request"}'
          schema:
            type: string
        "401":
          description: '{"error":"Not valid refresh token"}'
          schema:
            type: string
        "500":
          description: '{"error":"Internal server error"}'
          schema:
            type: string
      summary: Update tokens
      tags:
      - auth
  /catalog:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Ok
        "401":
          description: '{"error":"unauthenticated"}'
          schema:
            type: string
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Show catalog
      tags:
      - catalog
  /catalog/category:
    post:
      consumes:
      - application/json
      parameters:
      - description: name of catgory
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
        "400":
          description: Bad request
        "401":
          description: '{"error":"unauthenticated"}'
          schema:
            type: string
        "409":
          description: '{"error":"credential error"}'
          schema:
            type: string
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Add new category
      tags:
      - catalog
  /catalog/product:
    post:
      consumes:
      - application/json
      parameters:
      - description: product info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
        "400":
          description: Bad request
        "401":
          description: '{"error":"unauthenticated"}'
          schema:
            type: string
        "409":
          description: '{"error":"credential error"}'
          schema:
            type: string
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Add new product
      tags:
      - catalog
  /catalog/product/change:
    put:
      consumes:
      - application/json
      parameters:
      - description: name of product
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Visible'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
        "400":
          description: Bad request
        "401":
          description: '{"error":"unauthenticated"}'
          schema:
            type: string
        "409":
          description: '{"error":"credential error"}'
          schema:
            type: string
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Change visible
      tags:
      - catalog
  /catalog/search:
    get:
      consumes:
      - application/json
      parameters:
      - description: Category
        in: query
        name: category
        type: string
      - description: Product
        in: query
        name: product
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ok
        "400":
          description: Bad request
        "401":
          description: '{"error":"unauthenticated"}'
          schema:
            type: string
        "500":
          description: Internal server error
      security:
      - ApiKeyAuth: []
      summary: Search in catalog
      tags:
      - catalog
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
